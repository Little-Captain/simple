<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
    <resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="sys_user_id"/>
        <result property="username" column="user_name"/>
        <result property="password" column="user_password"/>
        <result property="email" column="user_email"/>
        <result property="info" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="userRoleMap" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <association property="role" columnPrefix="role_"
                     resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
    </resultMap>
    <resultMap id="userRoleMapSelect" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <association property="role"
                     fetchType="lazy"
                     column="{id=sys_role_id}"
                     select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById"/>
    </resultMap>
    <select id="selectById" resultMap="userMap">
        SELECT *
        FROM t_sys_user
        WHERE sys_user_id = #{id}
    </select>
    <select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
        SELECT sys_user_id   id,
               user_name     username,
               user_password password,
               user_email    email,
               user_info     info,
               head_img      headImg,
               create_time   createTime
        FROM t_sys_user
    </select>
    <select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
        SELECT r.sys_role_id id,
               r.role_name   name,
               r.enabled     enabled,
               r.create_by   createBy,
               r.create_time createTime,
               u.user_name   `user.username`,
               u.user_email  `user.email`
        FROM t_sys_user u
                 JOIN t_sys_user_role ur ON u.sys_user_id = ur.sys_user_id
                 JOIN t_sys_role r ON ur.sys_role_id = r.sys_role_id
        WHERE u.sys_user_id = #{userId}
    </select>
    <insert id="insert">
        INSERT INTO t_sys_user(sys_user_id,
                               user_name,
                               user_password,
                               user_email,
                               user_info,
                               head_img,
                               create_time)
        VALUES (#{id},
                #{username},
                #{password},
                #{email},
                #{info},
                #{headImg, jdbcType=BLOB},
                #{createTime, jdbcType=TIMESTAMP})
    </insert>
    <!-- 适用于主键自增的数据库 -->
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_sys_user(user_name,
        user_password,
        <if test="email != null and email != ''">
            user_email,
        </if>
        user_info,
        head_img,
        create_time)
        VALUES (#{username},
        #{password},
        <if test="email != null and email != ''">
            #{email},
        </if>
        #{info},
        #{headImg, jdbcType=BLOB},
        #{createTime, jdbcType=TIMESTAMP})
    </insert>
    <!-- 适用于所有数据库 -->
    <insert id="insert3">
        INSERT INTO t_sys_user (
        user_name,
        user_password,
        user_email,
        user_info,
        head_img,
        create_time
        )
        VALUES (
        #{username},
        #{password},
        #{email},
        #{info},
        #{headImg, jdbcType=BLOB},
        #{createTime, jdbcType=TIMESTAMP}
        )
        <selectKey keyColumn="sys_user_id" keyProperty="id" order="AFTER" resultType="long">
            SELECT last_insert_id()
        </selectKey>
    </insert>
    <update id="updateById">
        UPDATE t_sys_user
        SET user_name     = #{username},
            user_password = #{password},
            user_email    = #{email},
            user_info     = #{info},
            head_img      = #{headImg, jdbcType=BLOB},
            create_time   = #{createTime, jdbcType=TIMESTAMP}
        WHERE sys_user_id = #{id}
    </update>
    <delete id="deleteById">
        DELETE
        FROM t_sys_user
        WHERE sys_user_id = #{id}
    </delete>
    <select id="selectRolesByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole">
        SELECT *
        FROM t_sys_user u
                 JOIN t_sys_user_role ur ON u.sys_user_id = ur.sys_user_id
                 JOIN t_sys_role r ON ur.sys_role_id = r.sys_role_id
        WHERE u.sys_user_id = #{userId}
          AND r.enabled = #{enabled}
    </select>
    <select id="selectRolesByUserAndRole" resultType="tk.mybatis.simple.model.SysRole">
        SELECT *
        FROM t_sys_user u
                 JOIN t_sys_user_role ur ON u.sys_user_id = ur.sys_user_id
                 JOIN t_sys_role r ON ur.sys_role_id = r.sys_role_id
        WHERE u.sys_user_id = #{user.id}
          AND r.enabled = #{role.enabled}
    </select>
    <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
        SELECT sys_user_id id,
        user_name username,
        user_password password,
        user_email email,
        user_info info,
        head_img headImg,
        create_time createTime
        FROM t_sys_user
        <where>
            <if test="username != null and username != ''">
                <!--<bind name="username_like" value="'%' + username + '%'"/>-->
                <if test="_databaseId == 'mysql'">
                    AND user_name LIKE concat('%', #{username}, '%')
                </if>
                <if test="_databaseId == 'oracle'">
                    AND user_name LIKE '%'||#{username}||'%'
                </if>
            </if>
            <if test="email != null and email != ''">
                AND user_email = #{email}
            </if>
        </where>
    </select>
    <update id="updateByIdSelective">
        UPDATE t_sys_user
        <set>
            <if test="username != null and username != ''">
                user_name = #{username},
            </if>
            <if test="password != null and password != ''">
                user_password = #{password},
            </if>
            <if test="email != null and email != ''">
                user_email = #{email},
            </if>
            <if test="info != null and info != ''">
                user_info = #{info},
            </if>
            <if test="headImg != null">
                head_img = #{headImg, jdbcType=BLOB},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            sys_user_id = #{id},
        </set>
        WHERE sys_user_id = #{id}
    </update>
    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
        SELECT sys_user_id id,
        user_name username,
        user_password password,
        user_email email,
        user_info info,
        head_img headImg,
        create_time createTime
        FROM t_sys_user
        WHERE 1 = 1
        <choose>
            <when test="id != null">
                AND sys_user_id = #{id}
            </when>
            <!--<when test="username != null and username != ''">-->
            <when test="@tk.mybatis.util.StringUtil@isNotEmpty(username)">
                AND user_name = #{username}
            </when>
            <otherwise>
                AND 1 = 2
            </otherwise>
        </choose>
    </select>
    <select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
        SELECT sys_user_id id,
        user_name username,
        user_password password,
        user_email email,
        user_info info,
        head_img headImg,
        create_time createTime
        FROM t_sys_user
        WHERE sys_user_id IN
        <foreach collection="ids" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select>
    <!-- 批量回写失败 -->
    <!--<insert id="insertList" useGeneratedKeys="true" keyProperty="id">-->
    <insert id="insertList">
        INSERT INTO t_sys_user (
        user_name,
        user_password,
        user_email,
        user_info,
        head_img,
        create_time
        )
        VALUES
        <foreach collection="users" item="u" separator=",">
            (
            #{u.username},
            #{u.password},
            #{u.email},
            #{u.info},
            #{u.headImg, jdbcType=BLOB},
            #{u.createTime, jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>
    <update id="updateByMap">
        UPDATE t_sys_user
        SET
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        <bind name="print" value="@tk.mybatis.util.StringUtil@print(_parameter)"/>
        <!-- map 用 . 语法 -->
        <!-- WHERE sys_user_id = #{_parameter.sys_user_id} -->
        <!-- 对象通过 ${OGNL} 可以直接调方法 -->
        <!-- WHERE sys_user_id = ${_parameter.get("sys_user_id")} -->
        <!-- WHERE sys_user_id = ${_parameter['sys_user_id']} -->
        <bind name="id" value="_parameter['sys_user_id']"/>
        WHERE sys_user_id = #{id}
        <!--
        从 Map 获取 value
        1. map[key]
        2. map.key
        注意: 必须保证 key 存在，不然会报错
        -->
    </update>
    <select id="selectUserAndRoleById" resultType="tk.mybatis.simple.model.SysUser">
        SELECT u.sys_user_id   id,
               u.user_name     username,
               u.user_password password,
               u.user_email    email,
               u.user_info     info,
               u.head_img      headImg,
               u.create_time   createTime,
               r.sys_role_id   `role.id`,
               r.role_name     `role.name`,
               r.enabled       `role.enabled`,
               r.create_by     `role.createBy`,
               r.create_time   `role.createTime`
        FROM t_sys_user u
                 JOIN t_sys_user_role ur ON u.sys_user_id = ur.sys_user_id
                 JOIN t_sys_role r ON ur.sys_role_id = r.sys_role_id
        WHERE u.sys_user_id = #{id};
    </select>
    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        SELECT u.sys_user_id,
               u.user_name,
               u.user_password,
               u.user_email,
               u.user_info,
               u.head_img,
               u.create_time,
               r.sys_role_id role_sys_role_id,
               r.role_name   role_role_name,
               r.enabled     role_enabled,
               r.create_by   role_create_by,
               r.create_time role_create_time
        FROM t_sys_user u
                 JOIN t_sys_user_role ur ON u.sys_user_id = ur.sys_user_id
                 JOIN t_sys_role r ON ur.sys_role_id = r.sys_role_id
        WHERE u.sys_user_id = #{id};
    </select>
    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        SELECT u.sys_user_id,
               u.user_name,
               u.user_password,
               u.user_email,
               u.user_info,
               u.head_img,
               u.create_time,
               ur.sys_role_id
        FROM t_sys_user u
                 JOIN t_sys_user_role ur ON u.sys_user_id = ur.sys_user_id
        WHERE u.sys_user_id = #{id};
    </select>
</mapper>
